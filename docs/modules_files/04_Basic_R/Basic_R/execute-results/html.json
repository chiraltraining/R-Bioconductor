{
  "hash": "778f22b37a64be1833a2d5693a0a9493",
  "result": {
    "markdown": "---\ntitle: \"Basic R\"\nauthor: \"Jubayer Hossain\"\ninstitute: \"[Founder & Instructor, CHIRAL Bangladesh](https://chiralbd.org/)\"\ndate: \"11 March 2023\"\noutput:\n  html_document:\n    toc: true\n    #number_sections: true\n    toc_depth: 6\n    toc_float: true \n    theme: cosmo\n--- \n\n::: {.cell}\n::: {.cell-output .cell-output-stderr}\n```\nWarning: package 'knitr' was built under R version 4.2.2\n```\n:::\n:::\n\n\n# Agenda \n- Introduction to R\n- Getting Started\n- Variables and Reserved Keywords\n- Data Types in R\n- Operators\n\n\n## Common new users frustrations\n\n1.  **Different versions of software**\n1.  **Data type problems (is that a character or a number?)**\n2.  Working directory problems: trying to read files that R \"can't find\"\n    - RStudio can help, and so do RStudio Projects\n    - discuss in Data Input/Output lecture\n3.  Typos (R is **case sensitive**, `x` and `X` are different)\n    - RStudio helps with \"tab completion\"\n    - discussed throughout\n    \n  \n\n## Explaining output \n\nIn slides, a command (we'll also call them code or a code chunk) will look like this\n\n\n::: {.cell}\n\n```{.r .cell-code}\nprint(\"Hello World!\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Hello World!\"\n```\n:::\n:::\n\n\nAnd then directly after it, will be the output of the code.  \nSo `print(\"I'm code\")` is the code chunk and [1] \"I'm code\" is the output.\n\n## R as a calculator\n\n\n::: {.cell}\n\n```{.r .cell-code}\n2 + 2\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 4\n```\n:::\n\n```{.r .cell-code}\n2 * 4\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 8\n```\n:::\n\n```{.r .cell-code}\n2^3\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 8\n```\n:::\n:::\n\n\nNote: when you type your command, R inherently thinks you want to print the result. \n\n## R as a calculator\n\n- The R console is a full calculator\n- Try to play around with it:\n    - +, -, /, * are add, subtract, divide and multiply\n    - ^ or ** is power\n    - parentheses -- ( and ) -- work with order of operations \n    - %% finds the remainder\n\n## R as a calculator\n\n\n::: {.cell}\n\n```{.r .cell-code}\n2 + (2 * 3)^2\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 38\n```\n:::\n\n```{.r .cell-code}\n(1 + 3) / 2 + 45\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 47\n```\n:::\n\n```{.r .cell-code}\n6 / 2 * (1 + 2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 9\n```\n:::\n:::\n\n::: {.cell}\n::: {.cell-output-display}\n![](images/Basic_R_calculator.jpg){fig-alt='Problem gives answer of 1 or 9 depending on calculator.' width=30% style=\"float:left\"}\n:::\n:::\n\n::: {.cell}\n::: {.cell-output-display}\n![](images/Basic_R_viral_math_problem.png){fig-alt='Problem gives answer of 1 or 9 depending on calculator.' width=60% style=\"float:left\"}\n:::\n:::\n\n\n## R as a calculator\n\nTry evaluating the following:\n\n- `2 + 2 * 3 / 4 -3`\n- `2 * 3 / 4 * 2`\n- `2^4 - 1`\n\n## Commenting in Scripts\n\n`#` creates a comment in R code\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# this is a comment\n\n# nothing to its right is evaluated\n\n# this # is still a comment\n### you can use many #'s as you want\n\n1 + 2 # Can be the right of code\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 3\n```\n:::\n:::\n\n\nIn an `.Rmd` file, you can write notes outside the R chunks.\n\n## Assigning values to objects\n\n- You can create objects from within the R environment and from files on your computer\n- R uses `<-` to assign values to an object name (you might also see `=` used, but this is not best practice)\n- Object names are case-sensitive, i.e. X and x are different\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- 2\nx\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 2\n```\n:::\n\n```{.r .cell-code}\nx * 4\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 8\n```\n:::\n\n```{.r .cell-code}\nx + 2\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 4\n```\n:::\n:::\n\n\n\n# Variables(Identifiers) in R\n- Variables are used to **store data**, whose value can be changed according to our need. \n- A variable is a name given to a memory location, which is used to store values in a computer program.\n- Variables in R programming can be used to store numbers (real and complex), words, matrices, and even tables.  \n- R is a dynamically programmed language which means that unlike other programming languages, we do not have to declare the data type of a variable before we can use it in our program. \n- Unique name given to variable (function and objects as well) is **identifier**.\n\n\n# Rules for writing Identifiers in R\n- Identifiers can be a combination of letters, digits, period (.) and underscore (_). \n- It must start with a letter or a period. If it starts with a period, it cannot be followed by a digit.\n- It should not start with a number (e.g: 2x) \n- It should not start with a dot followed by a number (e.g: .2x)  \n- It should not start with an underscore (e.g: _x) \n- Reserved words in R cannot be used as identifiers(e.g: TRUE, FALSE) \n\nBasically, there are 5 naming conventions \n- alllowercase: e.g. `myname`\n- period.separated: e.g. `new.name`\n- underscore_separated: e.g. `my_name`\n- lowerCamelCase: e.g. `myName`\n- UpperCamelCase: e.g. `MyName`\n\n\n# Creating Variables\nUsing equal(`=`) operator\n\n::: {.cell}\n\n```{.r .cell-code}\nx = 10 \n```\n:::\n\nUsing leftward(`<-`) operator \n\n::: {.cell}\n\n```{.r .cell-code}\ny <- 15  \n```\n:::\n\n\n#  Reserved Keaywords in R\n- Don’t use any reserved keyword as variable name. List all of reserved words in R by using (?Reserved). \n\n\n::: {.cell}\n\n```{.r .cell-code}\n?Reserved\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nstarting httpd help server ... done\n```\n:::\n:::\n\n\n# Entering Input\nAt the R prompt/console we type expressions. \n\n::: {.cell}\n\n```{.r .cell-code}\nnum <- 10\n```\n:::\n\nThe `<-` symbol is the **assignment** operator. \nThe grammar of the language determines whether an expression is complete or not.\n\n\n# Evaluation\nWhen a complete expression is entered at the R console, it is evaluated and the result of evaluated expression is returned. The result may be auto-printed. \n\n::: {.cell}\n\n```{.r .cell-code}\nx <- 10\nx\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 10\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- 10\nprint(x)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 10\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- 10\ncat(x)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n10\n```\n:::\n:::\n\n\n## Assigning values to objects\n\n- The most comfortable and familiar class/data type for many of you will be `data.frame`\n- You can think of these as essentially spreadsheets with rows (usually subjects or observations) and columns (usually variables)\n- `data.frame`s are somewhat advanced objects in R; we will start with simpler objects\n\n## Assigning values to objects\n\n- Here we introduce \"1 dimensional\" classes; often referred to as 'vectors'\n- Vectors can have multiple sets of observations, but each observation has to be the same class.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nclass(x)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"numeric\"\n```\n:::\n\n```{.r .cell-code}\ny <- \"hello world!\"\nprint(y)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"hello world!\"\n```\n:::\n\n```{.r .cell-code}\nclass(y)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"character\"\n```\n:::\n:::\n\n\n## Simple object practice\n\nTry assigning your full name to an R object called `name`\n\n## Simple object practice\n\nTry assigning your full name to an R object called `name`\n\n\n::: {.cell}\n\n```{.r .cell-code}\nname <- \"Ava Hoffman\"\nname\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Ava Hoffman\"\n```\n:::\n:::\n\n\n## The 'combine' function\n\nThe function `c()` collects/combines/joins single R objects into a vector of R objects. It is mostly used for creating vectors of numbers, character strings, and other data types. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- c(1, 4, 6, 8)\nx\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1 4 6 8\n```\n:::\n\n```{.r .cell-code}\nclass(x)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"numeric\"\n```\n:::\n:::\n\n\n## The 'combine' function\n\nTry assigning your first and last name as 2 separate character strings into a single vector called `name2`\n\n## The 'combine' function\n\nTry assigning your first and last name as 2 separate character strings into a length-2 vector called `name2`\n\n\n::: {.cell}\n\n```{.r .cell-code}\nname2 <- c(\"Ava\", \"Hoffman\")\nname2\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Ava\"     \"Hoffman\"\n```\n:::\n:::\n\n\n## Arguments inside R functions\n\n- The contents you give to an R function are called \"arguments\"\n- Here, R assumes all arguments should be objects contained in the vector\n- We will talk more about arguments as we use more complicated functions!\n\n\n::: {.cell}\n\n```{.r .cell-code}\nname2 <- c(\"Ava\", \"Hoffman\")\n# Arg 1    ^^^^^\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nname2 <- c(\"Ava\", \"Hoffman\")\n# Arg 2           ^^^^^^^^^\n```\n:::\n\n\n## `length` of R objects\n\n`length()`: Get or set the length of vectors (including lists) and factors, and of any other R object for which a method has been defined.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlength(x)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 4\n```\n:::\n\n```{.r .cell-code}\ny\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"hello world!\"\n```\n:::\n\n```{.r .cell-code}\nlength(y)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1\n```\n:::\n:::\n\n\n## `length` of R objects\n\nWhat do you expect for the length of the `name` object? What about the `name2` object?\n\nWhat are the lengths of each?\n\n##  `length` of R objects\n\nWhat do you expect for the length of the `name` object? What about the `name2` object?\n\nWhat are the lengths of each?\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlength(name)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1\n```\n:::\n\n```{.r .cell-code}\nlength(name2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 2\n```\n:::\n:::\n\n\n## Math + vector objects\n\nYou can perform functions to entire vectors of numbers very easily.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx + 2\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1]  3  6  8 10\n```\n:::\n\n```{.r .cell-code}\nx * 3\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1]  3 12 18 24\n```\n:::\n\n```{.r .cell-code}\nx + c(1, 2, 3, 4)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1]  2  6  9 12\n```\n:::\n:::\n\n\n## Lab Part 1\n\n💻 [Lab](https://jhudatascience.org/intro_to_r/modules/Basic_R/lab/Basic_R_Lab.Rmd)\n\n## Math + vector objects\n\nBut things like algebra can only be performed on numbers.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nname2 + 4\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in name2 + 4: non-numeric argument to binary operator\n```\n:::\n:::\n\n\n## Reassigning to a new object\n\nSave these modified vectors as a new vector called `y`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ny <- x + c(1, 2, 3, 4)\ny\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1]  2  6  9 12\n```\n:::\n:::\n\n\nNote that the R object `y` is no longer \"hello  world!\" - It has been overwritten by assigning new data to the same name.\n\n## Reassigning to a new object\n\nReassigning allows you to make changes \"in place\"\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# results not stored:\nx + c(1, 2, 3, 4)\n\n# x remains unchanged, results stored in `y`:\ny <- x + c(1, 2, 3, 4)\n\n# replace `x` in place\nx <- x + c(1, 2, 3, 4)\n```\n:::\n\n\n## R objects\n\nYou can get more attributes than just class. The function `str()` gives you the structure of the object.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstr(x)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n num [1:4] 1 4 6 8\n```\n:::\n\n```{.r .cell-code}\nstr(y)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n num [1:4] 2 6 9 12\n```\n:::\n:::\n\n\nThis tells you that `x` is a numeric vector and tells you the length.\n\n## R objects\n\nThis is handy when we start dealing with bigger / more complex objects.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstr(z)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n num [1:100] 9 12 6 12 12 12 2 12 6 2 ...\n```\n:::\n:::\n\n\n# Comments in R\nThe # character indicates a comment. \n\n::: {.cell}\n\n```{.r .cell-code}\nx <- 10 # This is a comment\n```\n:::\n\nAnything to the right of the # (inlcuding the # itself) is ignored. \\\nThis is only comment character in R. \\\nR does not support multi-line comments or comment block.\n\n\n# Data Types in R\nR has five basic data types \n- character(e.g: 'abul', \"abul\")\n- numeric(e.g: 2, 3)\n- integer(e.g: 5L)\n- complex(e.g: 5i)\n- logical(True/False)\n\n# Numbers\n* Numbers in R generally treated as numeric objects(i.e. double precision real numbers)\n* If you explicitly want an integer, you need to specify the `L` suffix.\n* There is also a special number `Inf` which is represents infinity; e.g. `1 / 0`\n* `Inf` can be used in ordinary calculations; e.g. `1/Inf` is `0`\n* The value `NaN` represents an undefined value(\"not a number\"); e.g. `0/0` \n* `NaN` can also be thought of as a missing value. \n\nThe numeric constants are \n\n- integer(`L`)\n- double\n- complex(`i`) \n\n\n# Creating Numeric Objects\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create numeric object\nn <- 5  \n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Check type of object\ntypeof(n)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"double\"\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create an integer type object \ni = 5L \n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Check type of object\ntypeof(i)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"integer\"\n```\n:::\n:::\n\n\n# Creating Numeric Objects\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create a double type object \nd = 22\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Check type of object\ntypeof(d)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"double\"\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create a complex type object \nc = 4i \n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Check type of object\ntypeof(c)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"complex\"\n```\n:::\n:::\n\n\n\n# Characters\nCharacter constants can be represented using either single quotes ('') or double quotes (\"\") as delimiters.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create a character type object \nchar = \"Hello\"\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Check type of object \ntypeof(char)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"character\"\n```\n:::\n:::\n\n\n\n# Atributes\nR objects can have attributes \n\n* names, dimnames \n* dimensions(e.g. matrices, arrays)\n* class \n* length \n* other user-defined attributes/metadata\n\nAttributes of an object can be accessed using the `attributes()` function.\n\n# Built-in Constants in R\n\n\n::: {.cell}\n\n```{.r .cell-code}\npi # value of pi \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 3.141593\n```\n:::\n\n```{.r .cell-code}\nLETTERS\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] \"A\" \"B\" \"C\" \"D\" \"E\" \"F\" \"G\" \"H\" \"I\" \"J\" \"K\" \"L\" \"M\" \"N\" \"O\" \"P\" \"Q\" \"R\" \"S\"\n[20] \"T\" \"U\" \"V\" \"W\" \"X\" \"Y\" \"Z\"\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nmonth.name \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] \"January\"   \"February\"  \"March\"     \"April\"     \"May\"       \"June\"     \n [7] \"July\"      \"August\"    \"September\" \"October\"   \"November\"  \"December\" \n```\n:::\n:::\n\n\n# Operators in R\n- R has many operators to carry out different mathematical and logical operations.\n- Operators in R can mainly be classified into the following categories. \n  1. Arithmetic Operators \n  2. Relational Operators\n  3. Logical Operators \n  4. Assignment Operators \n  \n  \n# Arithmetic Operators\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- 10 \ny <- 2 \n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Addition\nx+y\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 12\n```\n:::\n\n```{.r .cell-code}\n# Subtraction\n2-5\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] -3\n```\n:::\n:::\n\n\n\n# Arithmetic Operators\n\n::: {.cell}\n\n```{.r .cell-code}\n# Multiplication\n2 * 5 \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 10\n```\n:::\n\n```{.r .cell-code}\n# Division\n2 / 5 \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0.4\n```\n:::\n\n```{.r .cell-code}\n# Exponent \n2 ^ 5\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 32\n```\n:::\n:::\n\n\n# Arithmetic Operators\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Modulus(Remainder from division)\n2 %% 5\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 2\n```\n:::\n\n```{.r .cell-code}\n# Integer Division \n2 %/% 5\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0\n```\n:::\n:::\n\n\n\n# Logical Operators\n\n::: {.cell}\n\n```{.r .cell-code}\n# Logical NOT(!)\n! TRUE\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] FALSE\n```\n:::\n\n```{.r .cell-code}\n! FALSE   \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] TRUE\n```\n:::\n:::\n\n\n# Logical Operators\n\n::: {.cell}\n\n```{.r .cell-code}\n# Logical AND(&&)\nTRUE && TRUE\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] TRUE\n```\n:::\n\n```{.r .cell-code}\nTRUE && FALSE \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] FALSE\n```\n:::\n\n```{.r .cell-code}\nFALSE && FALSE \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] FALSE\n```\n:::\n:::\n\n\n\n# Logical Operators\n\n::: {.cell}\n\n```{.r .cell-code}\n# Logical OR(|)\nTRUE | TRUE \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] TRUE\n```\n:::\n\n```{.r .cell-code}\nTRUE | FALSE \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] TRUE\n```\n:::\n\n```{.r .cell-code}\nFALSE | FALSE    \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] FALSE\n```\n:::\n:::\n\n\n# Relational Operators\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- 10\ny <- 5 \n# Equality \nx == y \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] FALSE\n```\n:::\n\n```{.r .cell-code}\n# Inequality\nx != y \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] TRUE\n```\n:::\n\n```{.r .cell-code}\n# Less Than \nx < y \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] FALSE\n```\n:::\n:::\n\n\n# Relational Operators\n\n::: {.cell}\n\n```{.r .cell-code}\n# Greater Than \nx > y \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] TRUE\n```\n:::\n\n```{.r .cell-code}\n# Less or Equal \nx <= y \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] FALSE\n```\n:::\n\n```{.r .cell-code}\n# Greater or Equal\nx >= y \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] TRUE\n```\n:::\n:::\n\n\n\n\n## Summary\n\n- R functions as a calculator\n- Use `<-` to save (assign) values to objects\n- Use `c()` to **combine** vectors\n- `length()`, `class()`, and `str()` tell you information about an object\n\n🏠 [Class Website](https://chiraltraining.github.io/WW01_DataAnalysiswithR/)\n\n💻 [Basic R Lab](https://chiraltraining.github.io/WW01_DataAnalysiswithR/)\n",
    "supporting": [
      "Basic_R_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}